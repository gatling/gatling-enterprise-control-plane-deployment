replicaCount: 1
# Kubernetes namespace where resources will be created.
namespace: gatling

# ----------------------------------------------------------------------
# CONTROL PLANE SETTINGS
# ----------------------------------------------------------------------
controlPlane:
  # Name used for the Control Plane Deployment.
  name: gatling-cp
  # Human-readable description for the Control Plane.
  description: My K8s control plane description
  image:
    # Docker image for the Control Plane container.
    name: gatlingcorp/control-plane:latest
    # How to pull the image (Always, IfNotPresent, Never).
    pullPolicy: Always
    # List of existing Kubernetes Secrets to pull images from private registries.
    pullSecrets: []
  # Additional labels to be added to the Control Plane Deployment resource.
  deploymentLabels: {}
  # Additional labels to be added to the Control Plane Pods.
  podLabels: {}
  # List of init containers that run before the main Control Plane container starts.
  initContainers: []
  # Environment variables injected into the Control Plane container.
  env:
    # Referencing a Kubernetes Secret to retrieve the Control Plane token.
    - name: CONTROL_PLANE_TOKEN # DO NOT CHANGE
      valueFrom:
        secretKeyRef:
          name: gatling-enterprise
          key: api-token
  # Override the default container entrypoint command if needed.
  command: []
  # Defines volumes for the Pod (e.g., configMaps, secrets, persistent volumes).
  volumes: []
  # Mount points for the volumes specified above.
  volumeMounts: []
  # Constrains Pods to nodes that match these key-value labels.
  nodeSelector: {}
  # Affinity rules (e.g., nodeAffinity, podAffinity, or podAntiAffinity).
  affinity: {}
  # Tolerations let Pods be scheduled on nodes with matching taints.
  tolerations: {}
  # Resource requests and limits for the Control Plane container.
  # Align requests with limits for consistent performance.
  resources:
    requests:
      memory: "1Gi"
      cpu: "1"
    limits:
      memory: "1Gi"
      cpu: "1"
  # Security context for running the container with specific privileges or user IDs.
  securityContext: {}
  # Uncomment to specify a forward proxy for the Control Plane (if needed).
  #enterpriseCloud:
    #url: "http://private-control-plane-forward-proxy/gatling"

# ----------------------------------------------------------------------
# PRIVATE LOCATIONS
# ----------------------------------------------------------------------
privateLocations:
  - id: "prl_kubernetes"           # Unique identifier for the private location
    description: "Private Location on Kubernetes"  # Short description
    type: "kubernetes"             # The type of private location
    engine: "classic"              # The execution engine type (e.g., "classic", "javascript")
    image:
      type: "certified"           # Image type (certified or custom)
      #java: "latest"             # For classic engine; no-op for javascript
      #image: "gatlingcorp/classic-openjdk:latest"  # Custom image name
    #systemProperties: {}         # System properties for the JVM
    #javaHome: "/usr/lib/jvm/zulu"  # Java home path
    #jvmOptions: ["-Xmx4G", "-Xms512M"]
    #keepLoadGeneratorAlive: false  # Whether to keep the load generator alive (for debugging - Do not forget to delete ghost pods.)
    # Uncomment to specify a forward proxy for the Location (if needed).
    #enterpriseCloud:
      #url: "http://location-forward-proxy/gatling"

    # Kubernetes Job spec for the load generator
    job:
      spec:
        template:
          metadata:
            # Additional annotation to be added to the Location Pods.
            annotations: {}
            # Additional labels to be added to the Location Pods.
            labels: {}
            # Kubernetes namespace where Locations will be created.
            namespace: "{{ .Values.namespace }}"
          spec:
            containers:
              - name: gatling-container
                # Environment variables injected into the Location container(s).
                env: []
                # Resource requests and limits for the Location container(s).
                # Align requests with limits for consistent performance.
                resources:
                  requests:
                    memory: "2Gi"
                    cpu: "2"
                  limits:
                    memory: "2Gi"
                    cpu: "2"
            # Security context for running the container with specific privileges or user IDs.
            securityContext: {}
        ttlSecondsAfterFinished: 60

# ----------------------------------------------------------------------
# PRIVATE PACKAGE SETTINGS
# ----------------------------------------------------------------------
privatePackage:
  # Enable or disable the private package repository feature.
  enabled: false
  repository:
    # Directory where files will be uploaded temporarily
    upload:
      directory: "/tmp"
    server:
      # Port on which the repository server listens
      port: 8080
      # Bind address for the server
      #bindAddress: "0.0.0.0"
      # SSL certificate configuration
      #certificate:
        #path: "/path/to/certificate.p12"
        #password: "password"
    service:
      # Service type on which you expose the control plane pod
      type: NodePort
      ports:
        - name: http
          protocol: TCP
          # Port on which the Service listens
          port: 80
          # Port on which the repository server listens
          targetPort: 8080
    # Repository backend: "filesystem", "aws", "azure", or "gcp".
    type: "filesystem"
    configurations:
      aws:
        bucket: "bucket-name"
        path: "folder/to/upload"
      azure:
        storage-account: "storage-account-name"
        container: "container-name"
        path: "folder/to/upload"
      gcp:
        bucket: "bucket-name"
        path: "folder/to/upload"
        project: "project-name"
      filesystem:
        directory: "/data/gatling-repository"
        location:
          download-base-url: "http://www.example.com:8080"

  # PersistentVolumeClaim configuration â€” only required if using 'repository.type = filesystem'.
  persistentVolumeClaim:
    # Storage class name for the PVC
    storageClassName: ""
    volumeMode: Filesystem
    accessModes: ["ReadWriteOnce"]
    storage: 5Gi
    # Selector to match an existing PV (optional)
    selector: {}
