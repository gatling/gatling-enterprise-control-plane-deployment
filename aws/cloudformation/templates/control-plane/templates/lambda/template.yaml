AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for uploading a JSON object to S3 with adjusted Locations handling.

Parameters:

  LambdaRoleARN:
    Type: String
    Description: Lambda Execution Role ARN.

  Token:
    Type: String
    Description: The token value to include in the JSON configuration.
    NoEcho: true

  Description:
    Type: String
    Description: The description to include in the JSON configuration.
    Default: "Description of the control plane."

  BucketName:
    Type: String
    Description: The name of the existing S3 bucket.

  ObjectKey:
    Type: String
    Description: The key name for the S3 object.

  Locations:
    Type: String
    Description: A list of location configurations (as JSON strings).

  ExtraContent:
    Type: String
    Description: Additional JSON configuration to merge into the control-plane section (as a JSON string).

  PrivatePackage:
    Type: String
    Description: The configuration for the private package (as a JSON string).

Resources:

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !Ref LambdaRoleARN
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3

          s3 = boto3.client('s3')

          def send_response(event, context, response_status, response_data, physical_resource_id):
            url = event['ResponseURL']
            body = json.dumps({
              "Status": response_status,
              "Reason": f"See the details in CloudWatch Log Stream: {context.log_stream_name}",
              "PhysicalResourceId": physical_resource_id or context.log_stream_name,
              "StackId": event['StackId'],
              "RequestId": event['RequestId'],
              "LogicalResourceId": event['LogicalResourceId'],
              "Data": response_data
            })
            headers = {
              'Content-Type': '',
              'Content-Length': str(len(body))
            }

            http = urllib3.PoolManager()
            response = http.request('PUT', url, body=body, headers=headers)

            print(f"CloudFormation response status: {response.status}, response: {response.data}")

          def handle_create_update(event, context):
            try:
              object_key = event['ResourceProperties']['Key']
              bucket_name = event['ResourceProperties']['BucketName']

              token = event['ResourceProperties']['Token']
              description = event['ResourceProperties']['Description']

              raw_locations = event['ResourceProperties']['Locations']
              locations = json.loads(f"[{raw_locations}]")

              private_package = json.loads(event['ResourceProperties']['PrivatePackage'])
              extra_content = json.loads(event['ResourceProperties']['ExtraContent'])

              for location in locations:
                if 'subnets' in location and isinstance(location['subnets'], str):
                  location['subnets'] = location['subnets'].split(',')
                if 'security-groups' in location and isinstance(location['security-groups'], str):
                  location['security-groups'] = location['security-groups'].split(',')
                if 'elastic-ips' in location and isinstance(location['elastic-ips'], str):
                  location['elastic-ips'] = location['elastic-ips'].split(',')
                if 'jvm-options' in location and isinstance(location['jvm-options'], str):
                  location['jvm-options'] = location['jvm-options'].split(',')

              control_plane = {
                "token": token,
                "description": description,
                "locations": locations,
                "repository": private_package
              }

              if extra_content:
                control_plane.update(extra_content)

              body_content = json.dumps({"control-plane": control_plane})
              s3.put_object(Bucket=bucket_name, Key=object_key, Body=body_content)

              print("Control plane configuration successfully uploaded to S3 Bucket.")
              print(f"{body_content}")

              send_response(event, context, "SUCCESS", {"Message": "File successfully uploaded"}, object_key)

            except Exception as e:
              print(f"Error: {str(e)}")
              send_response(event, context, "FAILED", {"Error": str(e)}, None)

          def handle_delete(event, context):
            try:
              object_key = event['ResourceProperties']['Key']
              bucket_name = event['ResourceProperties']['BucketName']

              s3.delete_object(Bucket=bucket_name, Key=object_key)
              
              print("Control plane configuration successfully deleted from S3 Bucket.")

              send_response(event, context, "SUCCESS", {"Message": "File successfully deleted"}, object_key)

            except Exception as e:
              send_response(event, context, "FAILED", {"Error": str(e)}, None)

          def handler(event, context):
            request_type = event['RequestType']

            if request_type == 'Create' or request_type == 'Update':
              handle_create_update(event, context)

            elif request_type == 'Delete':
              handle_delete(event, context)

      Runtime: python3.12
      Timeout: 60

  S3ObjectCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt MyLambdaFunction.Arn
      BucketName: !Ref BucketName
      Key: !Ref ObjectKey
      Token: !Ref Token
      Description: !Ref Description
      Locations: !Ref Locations
      PrivatePackage: !Ref PrivatePackage
      ExtraContent: !Ref ExtraContent
